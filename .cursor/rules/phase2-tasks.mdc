---
description: 
globs: 
alwaysApply: false
---
# Phase 2: 생성자 주입 및 Setter 주입 지원 - 작업 목록

## 목표
@Autowired가 없는 생성자 주입과 Setter 주입 패턴을 지원하여 Spring의 권장 주입 방식을 완전히 지원합니다.

## 전제 조건
- Phase 1 완료 ([@Autowired 어노테이션 탐지](mdc:.cursor/rules/phase1-tasks.mdc))
- 기본 Java 파서 및 Bean 탐지기 구현 완료

## 새로운 기능 요구사항

### 생성자 주입 (Constructor Injection)
- Spring Framework 5.0+ 에서는 생성자가 하나만 있으면 @Autowired 생략 가능
- 생성자 매개변수 타입을 기반으로 Bean 주입 탐지
- 복수 생성자가 있는 경우 @Autowired가 붙은 생성자만 처리

### Setter 주입 (Setter Injection)
- @Autowired가 붙은 setter 메소드 탐지
- 메소드 매개변수 타입 기반 Bean 주입 탐지

## ✅ TDD 개발 방법론

### TDD 사이클 (Red-Green-Refactor)
각 기능 구현 시 반드시 다음 순서를 따릅니다:

1. **🔴 Red**: 실패하는 테스트 작성
   - 새로운 기능에 대한 테스트 케이스 작성
   - 테스트 실행하여 실패 확인
   
2. **🟢 Green**: 테스트를 통과하는 최소한의 코드 작성
   - 테스트를 통과시키는 구현 코드 작성
   - 품질보다는 동작하는 코드에 집중
   
3. **🔵 Refactor**: 코드 개선 및 리팩토링
   - 중복 제거, 성능 개선, 가독성 향상
   - 테스트가 여전히 통과하는지 확인

### 테스트 우선 개발 지침

#### 각 작업 시작 전 필수 단계:
1. **테스트 파일 먼저 생성**: 구현 파일보다 테스트 파일을 먼저 만듦
2. **테스트 케이스 작성**: 예상 동작을 명확히 정의
3. **실패 확인**: 테스트가 실패하는지 확인 (Red 단계)
4. **구현 시작**: 테스트를 통과시키는 코드 작성

#### 테스트 네이밍 규칙
```typescript
describe('ConstructorInjectionDetector', () => {
    describe('detectSingleConstructorInjection', () => {
        it('should_detectConstructorParameters_when_singleConstructorWithoutAutowired', () => {
            // 단일 생성자 자동 주입 테스트
        });
        
        it('should_ignoreConstructor_when_multipleConstructorsWithoutAutowired', () => {
            // 다중 생성자면 무시 테스트
        });
        
        it('should_extractParameterTypes_when_constructorHasMultipleParameters', () => {
            // 매개변수 타입 추출 테스트
        });
    });
    
    describe('detectMultiConstructorInjection', () => {
        it('should_selectAutowiredConstructor_when_multipleConstructorsExist', () => {
            // @Autowired 생성자 선택 테스트
        });
        
        it('should_returnEmpty_when_noAutowiredConstructorInMultiple', () => {
            // @Autowired 없는 다중 생성자 처리
        });
    });
});

describe('SetterInjectionDetector', () => {
    describe('detectSetterInjection', () => {
        it('should_detectAutowiredSetter_when_validSetterMethodExists', () => {
            // @Autowired setter 메소드 탐지
        });
        
        it('should_validateSetterNaming_when_methodFollowsSetterPattern', () => {
            // setXxx 명명 규칙 검증
        });
        
        it('should_ignoreNonSetterMethods_when_autowiredButNotSetter', () => {
            // @Autowired이지만 setter가 아닌 메소드 무시
        });
    });
});
```

## 상세 작업 목록 (TDD 방식)

### 1. Java 파서 확장 (우선순위: 높음)
- [x] **1.1** 타입 정의 확장 (테스트 먼저!)
  - **🔴 테스트**: `src/test/models/spring-types.test.ts` 생성 ✅
  - **🟢 구현**: `src/models/spring-types.ts` 업데이트 ✅
    - ConstructorInfo, MethodInfo, ParameterInfo 인터페이스 추가
    - BasePositionInfo 기반 클래스 추가  
    - InjectionType enum에 CONSTRUCTOR, SETTER 추가
  - **🔵 리팩터**: 중복 제거 및 명명 일관성 확인 ✅

- [x] **1.2** 생성자 추출 로직 (테스트 먼저!)
  - **🔴 테스트**: `src/test/parsers/extractors/constructor-extractor.test.ts` 생성 ✅
    - 18개 포괄적 테스트 케이스 작성 및 통과
  - **🟢 구현**: `src/parsers/extractors/constructor-extractor.ts` 생성 ✅
    - extractConstructors, parseConstructorDeclaration 구현
    - detectAutowiredAnnotation, extractParametersFromDeclaration 구현
    - 복잡한 매개변수 및 어노테이션 처리 지원
  - **🔵 리팩터**: 성능 및 가독성 개선 ✅

- [x] **1.3** Setter 메소드 추출 로직 (테스트 먼저!)
  - **🔴 테스트**: `src/test/parsers/extractors/setter-extractor.test.ts` 생성 ✅
    - 23개 포괄적 테스트 케이스 작성 및 통과
  - **🟢 구현**: `src/parsers/extractors/setter-extractor.ts` 생성 ✅
    - extractSetterMethods, parseMethodDeclaration 구현
    - isSetterMethod, detectAutowiredAnnotation 구현
    - 다중 라인 메서드 및 복잡한 어노테이션 지원
  - **🔵 리팩터**: 중복 코드 제거 ✅

- [x] **1.4** Java 파서 통합 (테스트 먼저!)
  - **🔴 테스트**: `src/test/parsers/java-file-parser.test.ts` 확장 ✅
    - 생성자/setter 주입 통합 테스트 10+ 케이스 추가
  - **🟢 구현**: `src/parsers/java-file-parser.ts` 확장 ✅
    - ConstructorExtractor, SetterExtractor 통합
    - parseJavaFile 메서드에 생성자/메서드 정보 추가
  - **🔵 리팩터**: 메소드 분리 및 최적화 ✅

### 2. 주입 패턴 탐지기 확장 (우선순위: 높음)
- [x] **2.1** 생성자 주입 탐지 로직 (테스트 먼저!)
  - **🔴 테스트**: `src/test/detectors/constructor-injection-detector.test.ts` 생성 ✅
    - 16개 포괄적 테스트 케이스 작성 및 통과
  - **🟢 구현**: `src/detectors/constructor-injection-detector.ts` 생성 ✅
    - detectSingleConstructorInjection (Spring 5.0+ 단일 생성자 자동 주입)
    - detectAutowiredConstructorInjection (@Autowired 생성자 선택)
    - detectAllConstructorInjections (통합 탐지 로직)
  - **🔵 리팩터**: Spring 규칙 정확성 검증 ✅

- [x] **2.2** Setter 주입 탐지 로직 (테스트 먼저!)
  - **🔴 테스트**: `src/test/detectors/setter-injection-detector.test.ts` 생성 ✅
    - 15개 포괄적 테스트 케이스 작성 및 통과
  - **🟢 구현**: `src/detectors/setter-injection-detector.ts` 생성 ✅
    - detectSetterInjection (@Autowired setter 탐지)
    - detectAllSetterInjections (모든 클래스 처리)
    - hasAutowiredAnnotation (어노테이션 검증)
  - **🔵 리팩터**: 메소드 분리 및 성능 개선 ✅

- [x] **2.3** Spring Bean 탐지기 통합 (테스트 먼저!)
  - **🔴 테스트**: `src/test/detectors/spring-bean-detector.test.ts` 확장 ✅
    - Phase 2 관련 9개 통합 테스트 추가 및 통과
  - **🟢 구현**: `src/detectors/spring-bean-detector.ts` 확장 ✅
    - detectAllInjectionTypes (필드+생성자+setter 통합 탐지)
    - detectAllInjectionsInClasses (다중 클래스 처리)
    - ConstructorInjectionDetector, SetterInjectionDetector 통합
  - **🔵 리팩터**: 탐지 로직 최적화 ✅

### 3. Bean 해결자 확장 (우선순위: 높음)
- [x] **3.1** 매개변수 타입 기반 Bean 검색 (테스트 먼저!)
  - **🔴 테스트**: `src/test/utils/bean-resolver.test.ts` 확장 ✅
    - 14개 포괄적 테스트 케이스 작성 및 통과
    - resolveBeanForParameter, resolveBeanForConstructor, resolveBeanForMethod 테스트
    - 인터페이스 구현체 매칭, 다중 후보 처리, 성능/에지 케이스 테스트
  - **🟢 구현**: `src/utils/bean-resolver.ts` 확장 ✅
    - resolveBeanForParameter: 단일 매개변수 Bean 해결
    - resolveBeanForConstructor: 생성자 모든 매개변수 Bean 해결 
    - resolveBeanForMethod: 메서드 모든 매개변수 Bean 해결
    - 기존 resolveBeanForInjection 로직 재활용으로 일관성 유지
  - **🔵 리팩터**: 성능 최적화 ✅

### 4. CodeLens Provider 확장 (우선순위: 중간)
- [ ] **4.1** 생성자/Setter CodeLens (테스트 먼저!)
  - **🔴 테스트**: `src/test/providers/code-lens-provider.test.ts` 확장
    ```typescript
    describe('SpringCodeLensProvider', () => {
        describe('provideConstructorCodeLenses', () => {
            it('should_provideCodeLens_when_constructorParametersExist', () => {
                // 생성자 매개변수에 CodeLens 제공 테스트
            });
        });
        
        describe('provideSetterCodeLenses', () => {
            it('should_provideCodeLens_when_autowiredSetterExists', () => {
                // Setter 매개변수에 CodeLens 제공 테스트
            });
        });
    });
    ```
  - **🟢 구현**: `src/providers/code-lens-provider.ts` 확장
  - **🔵 리팩터**: CodeLens 텍스트 및 아이콘 개선

### 5. 네비게이션 기능 확장 (우선순위: 중간)
- [ ] **5.1** 생성자/Setter 네비게이션 (테스트 먼저!)
  - **🔴 테스트**: `src/test/providers/navigation-provider.test.ts` 확장
    ```typescript
    describe('SpringNavigationProvider', () => {
        describe('navigateFromConstructorParameter', () => {
            it('should_navigateToBean_when_constructorParameterClicked', () => {
                // 생성자 매개변수에서 Bean으로 네비게이션 테스트
            });
        });
        
        describe('navigateFromSetterParameter', () => {
            it('should_navigateToBean_when_setterParameterClicked', () => {
                // Setter 매개변수에서 Bean으로 네비게이션 테스트
            });
        });
    });
    ```
  - **🟢 구현**: `src/providers/navigation-provider.ts` 확장
  - **🔵 리팩터**: 네비게이션 로직 최적화

### 6. 통합 테스트 (우선순위: 높음)
- [ ] **6.1** Phase 2 통합 테스트 (테스트 먼저!)
  - **🔴 테스트**: `src/test/integration/phase2-integration.test.ts` 생성
    ```typescript
    describe('Phase 2 Integration Tests', () => {
        describe('Constructor Injection Workflow', () => {
            it('should_completeWorkflow_when_singleConstructorExists', () => {
                // 단일 생성자 전체 워크플로우 테스트
            });
            
            it('should_completeWorkflow_when_autowiredConstructorExists', () => {
                // @Autowired 생성자 전체 워크플로우 테스트
            });
        });
        
        describe('Setter Injection Workflow', () => {
            it('should_completeWorkflow_when_autowiredSetterExists', () => {
                // Setter 주입 전체 워크플로우 테스트
            });
        });
        
        describe('Mixed Injection Workflow', () => {
            it('should_handleMixedInjections_when_fieldConstructorSetterCombined', () => {
                // 혼합 주입 방식 전체 워크플로우 테스트
            });
        });
    });
    ```
  - **🟢 구현**: 모든 컴포넌트 통합 동작
  - **🔵 리팩터**: 성능 및 안정성 개선

## 📊 테스트 데이터 및 Mock 가이드라인

### 테스트용 Java 코드 템플릿
```typescript
// 단일 생성자 (자동 주입)
const SINGLE_CONSTRUCTOR_JAVA = `
@Service
public class OrderService {
    private final UserRepository userRepository;
    private final ProductRepository productRepository;
    
    public OrderService(UserRepository userRepository, ProductRepository productRepository) {
        this.userRepository = userRepository;
        this.productRepository = productRepository;
    }
}`;

// 다중 생성자 (@Autowired 선택)
const MULTIPLE_CONSTRUCTOR_JAVA = `
@Service
public class PaymentService {
    private UserRepository userRepository;
    private PaymentGateway paymentGateway;
    
    public PaymentService() {}
    
    @Autowired
    public PaymentService(UserRepository userRepository, PaymentGateway paymentGateway) {
        this.userRepository = userRepository;
        this.paymentGateway = paymentGateway;
    }
}`;

// Setter 주입
const SETTER_INJECTION_JAVA = `
@Service
public class NotificationService {
    private EmailService emailService;
    private SmsService smsService;
    
    @Autowired
    public void setEmailService(EmailService emailService) {
        this.emailService = emailService;
    }
    
    @Autowired
    public void setSmsService(SmsService smsService) {
        this.smsService = smsService;
    }
}`;

// 혼합 주입
const MIXED_INJECTION_JAVA = `
@Service
public class UserService {
    @Autowired
    private UserRepository userRepository; // 필드 주입
    
    private final EmailService emailService; // 생성자 주입
    private SmsService smsService; // Setter 주입
    
    public UserService(EmailService emailService) {
        this.emailService = emailService;
    }
    
    @Autowired
    public void setSmsService(SmsService smsService) {
        this.smsService = smsService;
    }
}`;
```

### Mock 객체 생성 가이드라인
```typescript
// VSCode Mock 객체
const mockDocument = {
    uri: vscode.Uri.file('/test/UserService.java'),
    getText: () => SINGLE_CONSTRUCTOR_JAVA,
    languageId: 'java'
} as vscode.TextDocument;

// Bean 정의 Mock
const mockUserRepositoryBean: BeanDefinition = {
    name: 'userRepository',
    type: 'UserRepository',
    implementationClass: 'com.example.repository.UserRepository',
    // ... 기타 속성
};
```

## 📈 테스트 커버리지 목표

### 단위 테스트 커버리지: 95% 이상
- 모든 public 메소드 테스트 필수
- 경계값 및 예외 상황 테스트 포함
- Mock을 활용한 의존성 분리

### 통합 테스트 커버리지: 90% 이상
- 전체 워크플로우 테스트
- 실제 사용 시나리오 기반 테스트
- 성능 및 메모리 사용량 테스트

### 테스트 실행 가이드라인
```bash
# 단위 테스트 실행
npm test -- --grep "unit"

# 통합 테스트 실행  
npm test -- --grep "integration"

# 특정 모듈 테스트
npm test -- --grep "ConstructorInjectionDetector"

# 커버리지 리포트 생성
npm run test:coverage
```

## 완료 기준 (기능 + 테스트)
- [x] 단일 생성자가 있는 클래스에서 자동 주입 탐지 + 단위 테스트 통과
- [x] @Autowired가 붙은 생성자의 매개변수 탐지 + 단위 테스트 통과
- [x] @Autowired setter 메소드 탐지 + 단위 테스트 통과
- [x] 매개변수 타입 기반 Bean 해결 로직 + 단위 테스트 통과
- [ ] 생성자/setter 매개변수에 CodeLens 표시 + UI 테스트 통과
- [ ] CodeLens 클릭으로 Bean 구현체 이동 + 네비게이션 테스트 통과
- [ ] 전체 워크플로우 통합 테스트 통과
- [ ] **모든 단위 테스트 및 통합 테스트 통과 (최소 95% 커버리지)**

## 구현 예시
```java
@Service
public class UserService {
    private final UserRepository userRepository; // 생성자 주입
    private EmailService emailService; // Setter 주입
    
    // 단일 생성자 - @Autowired 생략 가능
    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }
    
    @Autowired
    public void setEmailService(EmailService emailService) {
        this.emailService = emailService;
    }
}
```

## 예상 완료 시간 (TDD 방식)
- 기본 기능 + 단위 테스트: 2-3주 (각 메서드마다 테스트 작성)
- 통합 테스트 및 최적화: 추가 1주
- **권장 접근법**: 각 메서드 구현 → 즉시 테스트 작성 → 리팩토링

## 일일 개발 루틴 (TDD)
1. **아침**: 오늘 구현할 기능의 테스트 케이스 작성
2. **오전**: 테스트를 통과시키는 기본 구현
3. **오후**: 코드 리팩토링 및 추가 테스트 케이스 작성
4. **저녁**: 통합 테스트 실행 및 문서 업데이트

## 다음 Phase 준비사항
Phase 3을 위한 Lombok 어노테이션 분석 및 처리 방법 연구
