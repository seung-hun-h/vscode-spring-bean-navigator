---
description: 
globs: 
alwaysApply: false
---
# Phase 3: Lombok 어노테이션 지원 - 작업 목록

## 목표
Lombok 어노테이션으로 생성되는 생성자를 통한 의존성 주입을 지원하여, 현대적인 Spring 개발 패턴을 완전히 지원합니다.

## 전제 조건
- Phase 2 완료 ([생성자 주입 및 Setter 주입](mdc:.cursor/rules/phase2-tasks.mdc))
- Lombok 라이브러리에 대한 이해

## ✅ TDD 개발 방법론 (Phase 3 특화)

### TDD 사이클 (Red-Green-Refactor)
Lombok의 "가상 코드 생성" 특성에 맞춘 TDD 접근법:

1. **🔴 Red**: Lombok 시뮬레이션 실패 테스트 작성
   - Lombok 어노테이션 탐지 실패 테스트
   - 가상 생성자 생성 실패 테스트
   - final 필드 주입 탐지 실패 테스트
   
2. **🟢 Green**: Lombok 시뮬레이션 로직 구현
   - 어노테이션 파싱 → 필드 분석 → 가상 생성자 생성
   - 실제 Lombok이 생성할 코드와 동일한 결과 생성
   
3. **🔵 Refactor**: 시뮬레이션 정확성 및 성능 개선
   - Lombok 규칙 정확성 검증
   - 가상 코드 생성 최적화

### Lombok 특화 TDD 지침

#### 각 작업 시작 전 필수 단계:
1. **Lombok 동작 이해**: 실제 Lombok이 생성하는 코드 확인
2. **시뮬레이션 테스트 작성**: 예상 가상 생성자 정의
3. **실패 확인**: 시뮬레이션이 실패하는지 확인 (Red 단계)
4. **시뮬레이션 구현**: Lombok과 동일한 결과 생성 코드 작성

#### Lombok TDD 테스트 네이밍 규칙 (기존 패턴 적용)
```typescript
suite('🔧 LombokDetector Test Suite', () => {
    let detector: LombokDetector;
    let mockUri: vscode.Uri;

    setup(() => {
        detector = new LombokDetector();
        mockUri = TestUtils.createMockUri('/test/LombokService.java');
    });

    suite('detectRequiredArgsConstructor', () => {
        test('should_generateVirtualConstructor_when_requiredArgsConstructorWithFinalFields', () => {
            // Arrange
            // Act
            // Assert
        });
        
        test('should_includeNonNullFields_when_requiredArgsConstructorWithNonNull', () => {
            // Arrange
            // Act
            // Assert
        });
        
        test('should_maintainFieldOrder_when_generatingConstructorParameters', () => {
            // Arrange
            // Act
            // Assert
        });

        test('should_returnEmpty_when_noRequiredArgsAnnotation', () => {
            // Arrange
            // Act
            // Assert
        });

        test('should_handleStaticFinalFields_when_excludingFromConstructor', () => {
            // Arrange
            // Act
            // Assert
        });
    });

    suite('detectAllArgsConstructor', () => {
        test('should_includeAllFields_when_allArgsConstructorDetected', () => {
            // Arrange
            // Act
            // Assert
        });
        
        test('should_excludeStaticFields_when_generatingAllArgsConstructor', () => {
            // Arrange
            // Act
            // Assert
        });

        test('should_maintainFieldOrder_when_allArgsConstructorGenerated', () => {
            // Arrange
            // Act
            // Assert
        });
    });

    suite('simulateLombokGeneration', () => {
        test('should_matchActualLombokOutput_when_simulatingConstructor', () => {
            // Arrange
            // Act
            // Assert
        });
        
        test('should_handleComplexAnnotations_when_multipleAnnotationsPresent', () => {
            // Arrange
            // Act
            // Assert
        });

        test('should_respectLombokConfiguration_when_customParametersPresent', () => {
            // Arrange
            // Act
            // Assert
        });
    });

    suite('Error Handling', () => {
        test('should_handleNullClassInfo_when_nullProvided', () => {
            // Arrange
            // Act & Assert
        });

        test('should_handleEmptyFields_when_noFieldsInClass', () => {
            // Arrange
            // Act
            // Assert
        });

        test('should_handleMalformedAnnotations_when_invalidLombokAnnotations', () => {
            // Arrange
            // Act
            // Assert
        });
    });

    suite('Integration Tests', () => {
        test('should_processRealWorldExample_when_complexLombokServiceProvided', () => {
            // Arrange
            // Act
            // Assert
        });

        test('should_integratePreviousPhases_when_mixedInjectionTypesPresent', () => {
            // Arrange
            // Act
            // Assert
        });
    });
});

suite('🔧 LombokFieldAnalyzer Test Suite', () => {
    let analyzer: LombokFieldAnalyzer;

    setup(() => {
        analyzer = new LombokFieldAnalyzer();
    });

    suite('analyzeFinalFields', () => {
        test('should_identifyFinalFields_when_finalKeywordPresent', () => {
            // Arrange
            // Act
            // Assert
        });
        
        test('should_extractFieldTypes_when_finalFieldsDetected', () => {
            // Arrange
            // Act
            // Assert
        });
        
        test('should_ignoreStaticFinalFields_when_analyzingForInjection', () => {
            // Arrange
            // Act
            // Assert
        });
    });
    
    suite('analyzeNonNullFields', () => {
        test('should_detectNonNullAnnotation_when_lombokNonNullUsed', () => {
            // Arrange
            // Act
            // Assert
        });
        
        test('should_supportDifferentNonNullTypes_when_variousAnnotationsUsed', () => {
            // Arrange
            // Act
            // Assert
        });

        test('should_prioritizeExplicitNonNull_when_multipleNonNullAnnotations', () => {
            // Arrange
            // Act
            // Assert
        });
    });

    suite('analyzeFieldModifiers', () => {
        test('should_detectPrivateFields_when_accessModifierAnalysis', () => {
            // Arrange
            // Act
            // Assert
        });

        test('should_handlePackagePrivateFields_when_noModifierSpecified', () => {
            // Arrange
            // Act
            // Assert
        });
    });
});
```

## 📊 Lombok 테스트 데이터 및 Mock 가이드라인

### Lombok 테스트용 Java 코드 템플릿 (TestUtils 확장)
```typescript
/**
 * Lombok 관련 Java 파일 샘플 생성기 (Phase 3)
 */
export class LombokJavaSampleGenerator {
    
    /**
     * @RequiredArgsConstructor 기본 케이스
     */
    public static requiredArgsConstructorBasic(): string {
        // @RequiredArgsConstructor + final 필드 조합
    }

    /**
     * @RequiredArgsConstructor + @NonNull 조합
     */
    public static requiredArgsWithNonNull(): string {
        // @RequiredArgsConstructor + @NonNull 필드 조합
    }

    /**
     * @AllArgsConstructor 케이스
     */
    public static allArgsConstructor(): string {
        // 모든 필드를 생성자 매개변수로 포함
    }

    /**
     * 복잡한 Lombok 조합
     */
    public static complexLombokAnnotations(): string {
        // @RequiredArgsConstructor + @Slf4j + @Service 조합
    }

    /**
     * @Data 어노테이션 케이스 (생성자 관련 부분만)
     */
    public static dataAnnotationConstructor(): string {
        // @Data 어노테이션으로 생성되는 생성자 분석
    }

    /**
     * Lombok + 기존 생성자 혼재 케이스
     */
    public static lombokWithExplicitConstructor(): string {
        // 명시적 생성자가 있으면 Lombok 생성자 무시
    }

    /**
     * 상속 관계에서의 Lombok 처리
     */
    public static lombokWithInheritance(): string {
        // 부모 클래스 필드 + 자식 클래스 Lombok 조합
    }

    /**
     * 잘못된 Lombok 사용 케이스 (에러 테스트용)
     */
    public static invalidLombokUsage(): string {
        // 잘못된 Lombok 어노테이션 조합
    }

    /**
     * Lombok이 없는 일반 클래스
     */
    public static plainClassWithoutLombok(): string {
        // Lombok 어노테이션이 없는 일반 클래스
    }

    /**
     * 빈 필드를 가진 Lombok 클래스
     */
    public static lombokClassWithoutFields(): string {
        // 필드가 없는 @RequiredArgsConstructor 클래스
    }
}
```

### Lombok 시뮬레이션 예상 결과 (타입 정의)
```typescript
/**
 * Lombok Helper - 예상 결과 생성기
 */
export class LombokExpectedResultHelper {
    
    /**
     * @RequiredArgsConstructor 예상 생성자 정보 생성
     */
    public static createExpectedRequiredArgsConstructor(): VirtualConstructorInfo {
        // @RequiredArgsConstructor로 생성될 것으로 예상되는 생성자 정보
    }

    /**
     * @AllArgsConstructor 예상 생성자 정보 생성
     */
    public static createExpectedAllArgsConstructor(): VirtualConstructorInfo {
        // @AllArgsConstructor로 생성될 것으로 예상되는 생성자 정보
    }

    /**
     * Lombok 매개변수 정보 생성
     */
    public static createLombokParameterInfo(name: string, type: string, line: number): LombokParameterInfo {
        // Lombok 생성자 매개변수 정보
    }
}
```

### Lombok Mock 객체 생성 가이드라인 (TestUtils 확장)
```typescript
/**
 * Lombok 관련 Mock 객체 생성 헬퍼
 */
export class LombokMockHelper {
    
    /**
     * Lombok 어노테이션 정보 Mock 생성
     */
    public static createLombokAnnotationInfo(type: string, parameters?: any): LombokAnnotationInfo {
        // Lombok 어노테이션 정보 Mock
    }

    /**
     * 가상 생성자 정보 Mock 생성
     */
    public static createVirtualConstructorInfo(source: string, parameters: any[]): VirtualConstructorInfo {
        // 가상 생성자 정보 Mock
    }

    /**
     * final 필드 Mock 생성
     */
    public static createFinalFieldInfo(name: string, type: string, line: number): FieldInfo {
        // final 수식어가 있는 필드 정보
    }

    /**
     * @NonNull 필드 Mock 생성
     */
    public static createNonNullFieldInfo(name: string, type: string, line: number): FieldInfo {
        // @NonNull 어노테이션이 있는 필드 정보
    }
}
```

## 📈 Phase 3 테스트 커버리지 목표

### 단위 테스트 커버리지: 95% 이상
- **Lombok 시뮬레이션 정확성**: 100% 테스트 필수
- **가상 생성자 생성**: 모든 어노테이션 조합 테스트
- **필드 분석 로직**: final, @NonNull 조합 모든 케이스
- **에지 케이스**: 잘못된 Lombok 사용, 상속 관계 등

### 통합 테스트 커버리지: 90% 이상
- **Phase 1, 2 호환성**: 기존 기능과 Lombok 기능 혼재 시나리오
- **전체 워크플로우**: Lombok 파싱 → 주입 탐지 → CodeLens → 네비게이션
- **실제 Lombok 프로젝트**: Spring Boot + Lombok 실제 프로젝트 구조

### Lombok 특화 테스트 항목
```bash
# Lombok 시뮬레이션 테스트
npm test -- --grep "LombokDetector"

# 가상 생성자 생성 테스트
npm test -- --grep "VirtualConstructor"

# Lombok + Spring 통합 테스트
npm test -- --grep "lombok.*integration"

# Lombok 필드 분석 테스트
npm test -- --grep "LombokFieldAnalyzer"
```

## 🔄 Phase 3 TDD 워크플로우

### 일일 개발 루틴 (Lombok 특화)
1. **아침**: Lombok 어노테이션별 시뮬레이션 테스트 작성
2. **오전**: 가상 생성자 생성 로직 구현
3. **오후**: 시뮬레이션 정확성 검증 및 리팩토링
4. **저녁**: Phase 1, 2 기능과의 통합 테스트

### Lombok 시뮬레이션 검증 방법
1. **실제 Lombok 컴파일**: 테스트 Java 파일을 실제 Lombok으로 컴파일
2. **생성 코드 비교**: 컴파일된 바이트코드에서 생성자 정보 추출
3. **시뮬레이션 일치성**: 우리의 시뮬레이션 결과와 실제 생성 코드 비교
4. **불일치 시 수정**: 시뮬레이션 로직 개선

### 복잡한 Lombok 케이스 테스트 전략 (형식)
```typescript
suite('🧪 Complex Lombok Scenarios Test Suite', () => {
    
    suite('Multiple Lombok Annotations', () => {
        test('should_handleDataWithRequiredArgs_when_dataAnnotationPresent', () => {
            // Arrange
            // Act  
            // Assert
        });
        
        test('should_prioritizeExplicitConstructor_when_lombokAndManualConstructorExist', () => {
            // Arrange
            // Act
            // Assert
        });

        test('should_combineValueWithAllArgs_when_multipleConstructorAnnotations', () => {
            // Arrange
            // Act
            // Assert
        });
    });
    
    suite('Inheritance with Lombok', () => {
        test('should_considerParentFields_when_childHasRequiredArgsConstructor', () => {
            // Arrange
            // Act
            // Assert
        });
        
        test('should_handleSuperConstructorCall_when_inheritancePresent', () => {
            // Arrange
            // Act
            // Assert
        });

        test('should_respectFieldVisibility_when_inheritedFieldsPresent', () => {
            // Arrange
            // Act
            // Assert
        });
    });

    suite('Lombok Configuration', () => {
        test('should_respectLombokConfig_when_customConfigurationPresent', () => {
            // Arrange
            // Act
            // Assert
        });

        test('should_handleStaticName_when_staticNameParameterUsed', () => {
            // Arrange
            // Act
            // Assert
        });

        test('should_respectAccessLevel_when_accessParameterSpecified', () => {
            // Arrange
            // Act
            // Assert
        });
    });
});
```

## 새로운 기능 요구사항

### 지원할 Lombok 어노테이션
- `@RequiredArgsConstructor`: final 필드와 @NonNull 필드에 대한 생성자 생성
- `@AllArgsConstructor`: 모든 필드에 대한 생성자 생성
- `@NoArgsConstructor`: 기본 생성자 생성 (주입과 무관하지만 분석 필요)

### 주입 패턴 분석
- final 필드 기반 의존성 주입 탐지
- @NonNull 어노테이션 필드 처리

## 상세 작업 목록 (TDD 방식)

### 1. Lombok 어노테이션 파서 구현 (우선순위: 높음)
- [ ] **1.1** `src/parsers/java-file-parser.ts` 확장 (테스트 먼저!)
  - **🔴 테스트**: `src/test/parsers/java-file-parser.test.ts` 확장
    - Lombok 어노테이션 탐지 테스트 (5+ 케이스)
    - import 문 Lombok 확인 테스트
    - 클래스 레벨 어노테이션 분석 테스트
  - **🟢 구현**: Lombok 어노테이션 탐지 로직 추가
  - **🔵 리팩터**: 성능 및 정확성 개선

- [ ] **1.2** 필드 분석 확장 (테스트 먼저!)
  - **🔴 테스트**: `src/test/parsers/extractors/field-extractor.test.ts` 확장
    - final 키워드 필드 탐지 테스트 (10+ 케이스)
    - @NonNull 어노테이션 필드 탐지 테스트
    - 필드 접근 제어자 분석 테스트
  - **🟢 구현**: `src/parsers/extractors/field-extractor.ts` 확장
  - **🔵 리팩터**: 필드 분석 로직 최적화

### 2. Lombok 생성자 시뮬레이션 (우선순위: 높음)
- [ ] **2.1** `src/detectors/lombok-detector.ts` 생성 (테스트 먼저!)
  - **🔴 테스트**: `src/test/detectors/lombok-detector.test.ts` 생성
    - @RequiredArgsConstructor 시뮬레이션 테스트 (15+ 케이스)
    - @AllArgsConstructor 시뮬레이션 테스트 (10+ 케이스)
    - 복합 어노테이션 처리 테스트
    - 실제 Lombok 결과와 일치성 검증 테스트
  - **🟢 구현**: Lombok 시뮬레이션 로직 구현
  - **🔵 리팩터**: 시뮬레이션 정확성 및 성능 개선

- [ ] **2.2** 가상 생성자 정보 생성 (테스트 먼저!)
  - **🔴 테스트**: `src/test/models/spring-types.test.ts` 확장
    - VirtualConstructorInfo 인터페이스 테스트
    - LombokAnnotationInfo 인터페이스 테스트
  - **🟢 구현**: 가상 생성자 정보 타입 및 생성 로직
  - **🔵 리팩터**: Phase 2 생성자 주입 로직과 통합

### 3. 필드 기반 주입 탐지 (우선순위: 높음)
- [ ] **3.1** `src/detectors/spring-bean-detector.ts` 확장 (테스트 먼저!)
  - **🔴 테스트**: `src/test/detectors/spring-bean-detector.test.ts` 확장
    - Lombok 필드 주입 탐지 테스트 (12+ 케이스)
    - 가상 생성자 Bean 매핑 테스트
    - Phase 1, 2 기능과 혼재 시나리오 테스트
  - **🟢 구현**: Lombok 어노테이션 클래스 주입 탐지
  - **🔵 리팩터**: 탐지 로직 통합 및 최적화

### 4. CodeLens Provider 확장 (우선순위: 중간)
- [ ] **4.1** `src/providers/code-lens-provider.ts` 확장 (테스트 먼저!)
  - **🔴 테스트**: `src/test/providers/code-lens-provider.test.ts` 확장
    - Lombok 필드 CodeLens 표시 테스트 (15+ 케이스)
    - "Constructor Injected (Lombok)" 텍스트 테스트
    - 아이콘 및 명령 정확성 테스트
  - **🟢 구현**: Lombok 기반 CodeLens 생성
  - **🔵 리팩터**: CodeLens 표시 로직 통합

### 5. 네비게이션 기능 확장 (우선순위: 중간)
- [ ] **5.1** `src/providers/navigation-provider.ts` 확장 (테스트 먼저!)
  - **🔴 테스트**: `src/test/providers/navigation-provider.test.ts` 확장
    - Lombok 필드 네비게이션 테스트
    - 가상 생성자 정보 툴팁 테스트
  - **🟢 구현**: Lombok 필드에서 Bean 구현체 이동
  - **🔵 리팩터**: 네비게이션 로직 최적화

### 6. 타입 정의 확장 (우선순위: 중간)
- [ ] **6.1** `src/models/spring-types.ts` 확장 (테스트 먼저!)
  - **🔴 테스트**: `src/test/models/spring-types.test.ts` 확장
    - LombokAnnotationInfo 인터페이스 테스트
    - VirtualConstructorInfo 인터페이스 테스트
    - Lombok 기반 InjectionType 테스트
  - **🟢 구현**: Lombok 관련 타입 정의
  - **🔵 리팩터**: 타입 정의 일관성 확인

### 7. 통합 테스트 (우선순위: 높음)
- [ ] **7.1** Lombok 통합 테스트 (테스트 먼저!)
  - **🔴 테스트**: `src/test/extension.test.ts`에 Lombok 통합 테스트 섹션 추가
    - @RequiredArgsConstructor 전체 워크플로우 테스트
    - @AllArgsConstructor 전체 워크플로우 테스트
    - Phase 1, 2, 3 혼재 시나리오 테스트
    - 실제 Spring Boot + Lombok 프로젝트 시뮬레이션
  - **🟢 구현**: 모든 컴포넌트 통합 동작
  - **🔵 리팩터**: 성능 및 안정성 개선

## 완료 기준 (기능 + 테스트)
- [ ] @RequiredArgsConstructor가 붙은 클래스의 final 필드 탐지 + 단위 테스트 통과
- [ ] @AllArgsConstructor가 붙은 클래스의 모든 필드 탐지 + 단위 테스트 통과
- [ ] Lombok 기반 필드에 CodeLens 표시 + UI 테스트 통과
- [ ] CodeLens 클릭으로 Bean 구현체 이동 + 네비게이션 테스트 통과
- [ ] Lombok 특화 테스트 모두 통과 + 실제 Lombok 결과와 일치성 검증
- [ ] **모든 단위 테스트 및 통합 테스트 통과 (최소 95% 커버리지)**

## 구현 예시
```java
@Service
@RequiredArgsConstructor  // final 필드에 대한 생성자 자동 생성
public class UserService {
    private final UserRepository userRepository; // 생성자 주입됨
    private final EmailService emailService;    // 생성자 주입됨
    private String tempData; // 생성자 주입 안됨 (final 아님)
    
    // Lombok이 다음과 같은 생성자를 자동 생성:
    // public UserService(UserRepository userRepository, EmailService emailService) {
    //     this.userRepository = userRepository;
    //     this.emailService = emailService;
    // }
}
```

## 기술적 도전사항
- 컴파일 타임에 생성되는 코드를 소스 코드 분석으로 시뮬레이션
- Lombok 설정 파일 (lombok.config) 고려
- IDE의 Lombok 플러그인과의 호환성

## 예상 완료 시간 (TDD 방식)
- 기본 기능 + 단위 테스트: 2-3주 (Lombok 시뮬레이션 복잡성 고려)
- 통합 테스트 및 최적화: 추가 1주
- **권장 접근법**: Lombok 어노테이션별 시뮬레이션 → 즉시 테스트 작성 → 실제 Lombok 결과와 비교

## 🚀 다음 Phase 준비사항
Phase 4를 위한 Kotlin 언어 분석 도구 및 Spring Kotlin 특화 기능 연구
