# Commit Message Standards

## Commit Message Format

### Structure
```
<type>: <description under 50 characters>

- <detail line 1>
- <detail line 2>
```

### Type Categories
- **feat**: New feature (behavioral change)
- **fix**: Bug fix (behavioral change)
- **refactor**: Code refactoring without behavior change (structural change)
- **test**: Adding or modifying tests
- **docs**: Documentation changes
- **style**: Code style changes (formatting, missing semicolons, etc.)
- **chore**: Build process or auxiliary tool changes

### Commit Message Rules
#### Description (First Line)
- Use imperative mood ("add" not "added" or "adds")
- No capitalization of first letter
- No period at the end
- **Maximum 50 characters**
- **Write in English only**
- Be specific and descriptive

#### Details (Body)
- Optional: Add if more context needed
- **Maximum 150 characters total for all detail lines**
- Use bullet points starting with `-`
- Blank line between description and details
- Each detail line should be concise

## Commit Guidelines

### When to Commit
Only commit when:
1. **ALL tests are passing**
2. **ALL compiler/linter warnings resolved**
3. **Change represents single logical unit**
4. **Commit message clearly indicates change type**

### Commit Frequency
- **Small, frequent commits** over large, infrequent ones
- Each commit should be atomic and reversible
- Separate structural and behavioral changes into different commits

### TDD Commit Pattern
Follow the Red-Green-Refactor cycle:
1. **Red**: 
   ```
   test: add failing test for user authentication
   
   - Test login with valid credentials
   - Test login with invalid credentials
   ```
2. **Green**: 
   ```
   feat: implement user authentication
   
   - Add password validation
   - Return auth token on success
   ```
3. **Refactor**: 
   ```
   refactor: extract password validation logic
   
   - Move to separate utility class
   - Improve readability
   ```

## Examples

### Good Examples
```
feat: add @Autowired field detection

- Support for private/public fields
- Handle @Qualifier annotations

---

refactor: extract annotation parsing logic

---

test: add constructor injection test

- Cover single parameter case
- Test multiple parameters with @Qualifier

---

fix: resolve null pointer in bean detector

- Check for null CST nodes
- Add defensive null handling

---

docs: update README with usage examples
```

### Bad Examples
```
// ❌ Too vague
fix: bug fix

// ❌ Multiple changes in one commit
feat: add detector and fix parser bug

// ❌ Wrong type (should be refactor)
feat: rename method for clarity

// ❌ Too generic
test: add test

// ❌ Description too long (over 50 characters)
feat: implement comprehensive Spring Bean detection system

// ❌ Details too long (over 150 characters total)
fix: resolve parsing error

- Fixed issue where the parser would fail when encountering complex generic types in Spring components
- Added additional error handling for edge cases in annotation processing

// ❌ Not in English
feat: 스프링 빈 탐지 기능 추가
```

## Structural vs Behavioral Changes

### Structural Changes (refactor)
- Renaming variables, methods, classes
- Extracting methods or classes
- Moving code between files
- Changing code organization
- **No behavior change - tests remain the same**

### Behavioral Changes (feat/fix)
- Adding new functionality
- Fixing bugs
- Changing existing behavior
- **Behavior change - tests may need updates**

## Commit Message Templates

### Feature Development
```
feat: <description under 50 characters>

- <what was added>
- <why it was needed>
```

### Bug Fix
```
fix: <description under 50 characters>

- <what was broken>
- <how it was fixed>
```

### Refactoring
```
refactor: <description under 50 characters>

- <what was changed>
- <why it improves code>
```

### Test
```
test: <description under 50 characters>

- <what is being tested>
- <test scenarios covered>
```
