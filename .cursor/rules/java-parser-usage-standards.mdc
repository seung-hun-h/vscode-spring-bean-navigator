# Java Parser Usage Standards

This document outlines the correct usage patterns for the `java-parser` library based on our implementation experience.

## Overview

The `java-parser` library uses Chevrotain and provides a CST (Concrete Syntax Tree) that should be traversed using the Visitor pattern, not manual navigation.

## Key Concepts

### 1. Dynamic Import Required

Java-parser is an ES module and must be imported dynamically:

```typescript
const javaParser = await import('java-parser');
const { parse, BaseJavaCstVisitorWithDefaults } = javaParser;
```

### 2. CST Structure

The CST has this basic structure:
```
CST Root
├── name: 'compilationUnit'
├── children:
│   ├── ordinaryCompilationUnit
│   └── EOF
└── location: { startOffset, startLine, startColumn, endOffset, endLine, endColumn }
```

### 3. Visitor Pattern Implementation

#### Creating a Visitor Class

```typescript
class MyVisitor extends BaseJavaCstVisitorWithDefaults {
    constructor() {
        super();
        this.validateVisitor(); // Required!
    }
    
    // Override visitor methods as needed
}
```

#### Important: Prototype Chain Setup

When using TypeScript classes with dynamic imports:

```typescript
export class SpringInfoCollector {
    // Class implementation
}

export async function createSpringInfoCollector(fileUri: vscode.Uri): Promise<SpringInfoCollector> {
    await SpringInfoCollector.initialize(); // Load java-parser
    
    const collector = new SpringInfoCollector(fileUri);
    
    // Critical: Set prototype chain
    Object.setPrototypeOf(collector, BaseJavaCstVisitorWithDefaults.prototype);
    
    // Bind methods to maintain correct 'this' context
    collector.packageDeclaration = SpringInfoCollector.prototype.packageDeclaration.bind(collector);
    collector.classDeclaration = SpringInfoCollector.prototype.classDeclaration.bind(collector);
    
    // Call validateVisitor after prototype setup
    if (typeof (collector as any).validateVisitor === 'function') {
        (collector as any).validateVisitor();
    }
    
    return collector;
}
```

### 4. Common Visitor Methods

#### Package Declaration
```typescript
packageDeclaration(ctx: any) {
    // ctx.Identifier is an array of identifier tokens
    const packageName = ctx.Identifier.map((id: any) => id.image).join('.');
}
```

#### Class Declaration
```typescript
classDeclaration(ctx: any) {
    // Class modifiers (including annotations) are in ctx.classModifier
    if (ctx.classModifier) {
        ctx.classModifier.forEach((modifier: any) => {
            if (modifier.children.annotation) {
                // Process annotations
            }
        });
    }
    
    // The actual class declaration is in normalClassDeclaration
    if (ctx.normalClassDeclaration) {
        const normalClass = ctx.normalClassDeclaration[0];
        const className = normalClass.children.typeIdentifier[0].children.Identifier[0].image;
    }
}
```

#### Annotation Structure
```typescript
// Annotation structure in classModifier:
{
    children: {
        annotation: [{
            children: {
                At: [{ image: '@' }],
                typeName: [{
                    children: {
                        Identifier: [{ image: 'Service' }]
                    }
                }]
            }
        }]
    }
}
```

### 5. Common Pitfalls to Avoid

1. **Don't manually traverse the CST** - Use the Visitor pattern
2. **Don't forget validateVisitor()** - Must be called after prototype setup
3. **Don't access deeply nested properties without checks** - CST structure can vary
4. **Don't use normalClassDeclaration as a visitor method** - Use classDeclaration instead

### 6. Testing Pattern

```typescript
test('should extract class info', async () => {
    const source = `
    @Service
    public class UserService {
        // class content
    }`;
    
    const javaParser = await import('java-parser');
    const cst = javaParser.parse(source);
    
    const collector = await createSpringInfoCollector(mockUri);
    collector.visit(cst);
    
    // Assert results
});
```

### 7. Benefits Over Manual CST Navigation

- **Cleaner code**: ~85% less code compared to manual navigation
- **Better maintainability**: Visitor pattern is well-established
- **Type safety**: Can add TypeScript types for visitor methods
- **Performance**: Optimized traversal by the library

## References

- [java-parser npm package](https://www.npmjs.com/package/java-parser)
- [Chevrotain CST Visitor documentation](https://chevrotain.io/docs/guide/concrete_syntax_tree.html#cst-visitor)
