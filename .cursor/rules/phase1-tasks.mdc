---
description: 
globs: 
alwaysApply: false
---
# Phase 1: @Autowired 어노테이션 탐지 - 작업 목록

## 목표
Java 파일에서 @Autowired 어노테이션이 붙은 필드를 탐지하고, 해당 빈의 구현체로 네비게이션할 수 있는 기능을 구현합니다.

## 아키텍처 설계

### 디렉토리 구조 (kebab-case 네이밍 적용)
```
src/
├── extension.ts (기존)
├── providers/                 # VSCode 제공자들
│   ├── code-lens-provider.ts    # CodeLens 아이콘 표시
│   └── navigation-provider.ts  # 네비게이션 처리
├── detectors/                 # Bean 탐지 로직
│   └── spring-bean-detector.ts  # @Autowired 탐지
├── parsers/                   # 파일 파싱 로직
│   └── java-file-parser.ts      # Java 파일 파싱
├── utils/                     # 유틸리티 함수
│   └── bean-resolver.ts        # 빈 정의 검색
└── models/                    # 데이터 모델
    └── spring-types.ts         # 타입 정의
```

## 상세 작업 목록

### 1. 기본 설정 (우선순위: 높음)
- [x] **1.1** 필요한 의존성 추가
  - VSCode API 관련 타입
  - Java 파일 파싱용 라이브러리 (`java-parser` 추가 완료)
  - [package.json](mdc:package.json) 업데이트 (activationEvents, commands, languages 설정 완료)

- [x] **1.2** TypeScript 타입 정의 생성
  - `src/models/spring-types.ts` 생성 완료 (기존 src/types/springTypes.ts)
  - Bean 정보, 주입 정보 인터페이스 정의 완료

### 2. Java 파일 파서 구현 (우선순위: 높음)
- [x] **2.1** `src/parsers/java-file-parser.ts` 생성 완료
  - 클래스 정의 추출 (완료)
  - 필드 선언 추출 (완료)
  - 어노테이션 파싱 (완료)
  - 임포트 문 분석 (완료)
  - **테스트 추가 필요**: `src/test/parsers/java-file-parser.test.ts`

- [x] **2.2** @Autowired 필드 탐지 로직 완료
  - 필드 레벨 @Autowired 어노테이션 탐지 (완료)
  - 필드 타입 정보 추출 (완료)
  - 위치 정보 (라인, 컬럼) 저장 (완료)
  - Fallback 정규식 패턴 매칭 추가 (완료)
  - **테스트 추가 필요**: @Autowired 탐지 로직 단위 테스트

### 3. Spring Bean 탐지기 구현 (우선순위: 높음)
- [x] **3.1** `src/detectors/spring-bean-detector.ts` 생성
  - 워크스페이스 내 Java 파일 스캔
  - @Component, @Service, @Repository, @Controller 클래스 탐지
  - @Configuration 클래스의 @Bean 메소드 탐지
  - **테스트**: `src/test/detectors/spring-bean-detector.test.ts` 생성
    - Bean 어노테이션 탐지 테스트
    - 다양한 Spring 어노테이션 타입 테스트
    - 잘못된 어노테이션 무시 테스트

- [x] **3.2** Bean 정의 매핑 테이블 생성
  - Bean 이름 → 클래스 위치 매핑
  - Bean 타입 → 구현체 매핑
  - 캐싱 메커니즘 구현
  - **테스트**: 매핑 테이블 기능 테스트
    - Bean 이름 해결 테스트
    - 타입별 Bean 검색 테스트
    - 캐시 동작 테스트

### 4. Bean 해결자 구현 (우선순위: 높음)
- [x] **4.1** `src/utils/bean-resolver.ts` 생성
  - 타입 기반 Bean 검색
  - 인터페이스 → 구현체 매핑
  - 다중 구현체 처리
  - **테스트**: `src/test/utils/bean-resolver.test.ts` 생성
    - 정확한 타입 매칭 테스트
    - 인터페이스 구현체 찾기 테스트
    - 다중 Bean 후보 처리 테스트
    - Bean을 찾을 수 없는 경우 테스트

### 5. CodeLens Provider 구현 (우선순위: 중간)
- [x] **5.1** `src/providers/code-lens-provider.ts` 생성
  - VSCode CodeLensProvider 인터페이스 구현
  - @Autowired 필드 위치에 렌즈 표시
  - "Go to Bean Implementation" 텍스트 표시
  - **테스트**: `src/test/providers/code-lens-provider.test.ts` 생성
    - CodeLens 위치 정확성 테스트
    - @Autowired 필드에만 렌즈 표시 테스트
    - 텍스트 및 명령 검증 테스트

- [x] **5.2** 동적 렌즈 업데이트
  - 파일 변경 시 렌즈 새로고침
  - 성능 최적화 (필요한 경우에만 재계산)
  - **테스트**: 동적 업데이트 테스트
    - 파일 변경 감지 테스트
    - 렌즈 새로고침 동작 테스트
    - 불필요한 재계산 방지 테스트

### 6. 네비게이션 Provider 구현 (우선순위: 중간)
- [x] **6.1** `src/providers/navigation-provider.ts` 생성
  - Command 핸들러 구현
  - Bean 구현체로의 이동 로직
  - 여러 구현체가 있을 경우 선택 UI
  - **테스트**: `src/test/providers/navigation-provider.test.ts` 생성
    - Bean 위치로 정확한 이동 테스트
    - 다중 구현체 선택 UI 테스트
    - 잘못된 명령 처리 테스트

### 7. Extension 통합 (우선순위: 높음)
- [x] **7.1** [src/extension.ts](mdc:src/extension.ts) 업데이트
  - 모든 Provider 등록
  - Java 파일에서만 활성화
  - Command 등록
  - **테스트**: Extension 통합 테스트
    - Provider 등록 확인 테스트
    - Command 등록 확인 테스트
    - 활성화 이벤트 테스트

- [x] **7.2** [package.json](mdc:package.json) 설정 업데이트
  - activationEvents 추가 (✅ 완료)
  - contributes.commands 추가 (✅ 완료)
  - contributes.languages 설정 (✅ 완료)

### 8. 테스트 헬퍼 및 목업 (우선순위: 중간)
- [x] **8.1** 테스트 유틸리티 생성
  - `src/test/helpers/test-utils.ts` 생성
  - 가짜 Java 파일 내용 생성기
  - Mock VSCode API 헬퍼
  - 테스트용 Bean 정의 생성기

### 9. 통합 테스트 및 E2E 테스트 (우선순위: 중간)
- [x] **9.1** 전체 워크플로우 테스트
  - [src/test/extension.test.ts](mdc:src/test/extension.test.ts) 업데이트
  - Java 파일 → 파싱 → Bean 탐지 → CodeLens 표시 → 네비게이션 전체 흐름 테스트
  - 실제 Spring Boot 프로젝트 구조로 테스트

- [x] **9.2** 성능 및 안정성 테스트
  - 대용량 파일 처리 테스트
  - 메모리 사용량 테스트
  - 에러 복구 테스트

### 10. 최적화 및 에러 처리 (우선순위: 낮음)
- [ ] **10.1** 성능 최적화
  - 파일 스캔 최적화
  - 캐싱 메커니즘 강화
  - 대용량 프로젝트 대응
  - **테스트**: 성능 벤치마크 테스트

- [ ] **10.2** 에러 처리
  - 파싱 실패 처리
  - Bean을 찾을 수 없는 경우 처리
  - 사용자 친화적 에러 메시지
  - **테스트**: 다양한 에러 시나리오 테스트

## 완료 기준 (기능 + 테스트)
- [x] 간단한 @Autowired 필드가 탐지됨 + 단위 테스트 통과
- [x] @Service, @Component 클래스가 Bean으로 인식됨 + 단위 테스트 통과
- [x] CodeLens가 @Autowired 필드에 표시됨 + UI 테스트 통과
- [x] CodeLens 클릭 시 Bean 구현체로 이동됨 + 네비게이션 테스트 통과
- [x] 전체 워크플로우 통합 테스트 통과
- [x] 모든 단위 테스트 및 통합 테스트 통과 (최소 90% 커버리지)

## 예상 완료 시간 (TDD 방식)
- 기본 기능 + 단위 테스트: 2-3주 (각 메서드마다 테스트 작성)
- 통합 테스트 및 최적화: 추가 1주
- **권장 접근법**: 각 메서드 구현 → 즉시 테스트 작성 → 리팩토링

## 테스트 작성 가이드라인

### TDD 사이클
1. **Red**: 실패하는 테스트 작성
2. **Green**: 테스트를 통과하는 최소한의 코드 작성
3. **Refactor**: 코드 개선 및 리팩토링

### 테스트 네이밍 규칙
```typescript
describe('JavaFileParser', () => {
    describe('parseJavaFile', () => {
        it('should_extractAutowiredFields_when_validJavaFileProvided', () => {
            // 테스트 구현
        });
        
        it('should_returnEmptyArray_when_noAutowiredFields', () => {
            // 테스트 구현
        });
    });
});
```

### 필수 테스트 케이스
- **정상 케이스**: 올바른 입력에 대한 예상 결과
- **경계 케이스**: 빈 입력, null, undefined 처리
- **에러 케이스**: 잘못된 입력에 대한 예외 처리
- **통합 케이스**: 다른 컴포넌트와의 상호작용

### Mock 사용 가이드
- VSCode API는 반드시 Mock 사용
- 파일 시스템 접근은 가짜 데이터 사용
- 외부 의존성은 최소화

## 다음 Phase 준비사항
Phase 2 진행을 위해 생성자 주입 패턴 분석 준비
