---
description:
globs:
alwaysApply: false
---
# Phase 1: @Autowired 어노테이션 탐지 - 작업 목록

## 목표
Java 파일에서 @Autowired 어노테이션이 붙은 필드를 탐지하고, 해당 빈의 구현체로 네비게이션할 수 있는 기능을 구현합니다.

## 아키텍처 설계

### 디렉토리 구조
```
src/
├── extension.ts (기존)
├── providers/
│   ├── codeLensProvider.ts    # CodeLens 아이콘 표시
│   └── navigationProvider.ts  # 네비게이션 처리
├── detectors/
│   └── springBeanDetector.ts  # @Autowired 탐지
├── parsers/
│   └── javaFileParser.ts      # Java 파일 파싱
├── utils/
│   └── beanResolver.ts        # 빈 정의 검색
└── types/
    └── springTypes.ts         # 타입 정의
```

## 상세 작업 목록

### 1. 기본 설정 (우선순위: 높음)
- [ ] **1.1** 필요한 의존성 추가
  - VSCode API 관련 타입
  - Java 파일 파싱용 라이브러리 (또는 정규식 사용)
  - [package.json](mdc:package.json) 업데이트

- [ ] **1.2** TypeScript 타입 정의 생성
  - `src/types/springTypes.ts` 생성
  - Bean 정보, 주입 정보 인터페이스 정의

### 2. Java 파일 파서 구현 (우선순위: 높음)
- [ ] **2.1** `src/parsers/javaFileParser.ts` 생성
  - 클래스 정의 추출
  - 필드 선언 추출
  - 어노테이션 파싱
  - 임포트 문 분석

- [ ] **2.2** @Autowired 필드 탐지 로직
  - 필드 레벨 @Autowired 어노테이션 탐지
  - 필드 타입 정보 추출
  - 위치 정보 (라인, 컬럼) 저장

### 3. Spring Bean 탐지기 구현 (우선순위: 높음)
- [ ] **3.1** `src/detectors/springBeanDetector.ts` 생성
  - 워크스페이스 내 Java 파일 스캔
  - @Component, @Service, @Repository, @Controller 클래스 탐지
  - @Configuration 클래스의 @Bean 메소드 탐지

- [ ] **3.2** Bean 정의 매핑 테이블 생성
  - Bean 이름 → 클래스 위치 매핑
  - Bean 타입 → 구현체 매핑
  - 캐싱 메커니즘 구현

### 4. Bean 해결자 구현 (우선순위: 높음)
- [ ] **4.1** `src/utils/beanResolver.ts` 생성
  - 타입 기반 Bean 검색
  - 인터페이스 → 구현체 매핑
  - 다중 구현체 처리

### 5. CodeLens Provider 구현 (우선순위: 중간)
- [ ] **5.1** `src/providers/codeLensProvider.ts` 생성
  - VSCode CodeLensProvider 인터페이스 구현
  - @Autowired 필드 위치에 렌즈 표시
  - "Go to Bean Implementation" 텍스트 표시

- [ ] **5.2** 동적 렌즈 업데이트
  - 파일 변경 시 렌즈 새로고침
  - 성능 최적화 (필요한 경우에만 재계산)

### 6. 네비게이션 Provider 구현 (우선순위: 중간)
- [ ] **6.1** `src/providers/navigationProvider.ts` 생성
  - Command 핸들러 구현
  - Bean 구현체로의 이동 로직
  - 여러 구현체가 있을 경우 선택 UI

### 7. Extension 통합 (우선순위: 높음)
- [ ] **7.1** [src/extension.ts](mdc:src/extension.ts) 업데이트
  - 모든 Provider 등록
  - Java 파일에서만 활성화
  - Command 등록

- [ ] **7.2** [package.json](mdc:package.json) 설정 업데이트
  - activationEvents 추가
  - contributes.commands 추가
  - contributes.languages 설정

### 8. 테스트 구현 (우선순위: 중간)
- [ ] **8.1** 단위 테스트 작성
  - Java 파서 테스트
  - Bean 탐지기 테스트
  - Bean 해결자 테스트

- [ ] **8.2** 통합 테스트 작성
  - [src/test/extension.test.ts](mdc:src/test/extension.test.ts) 업데이트
  - 실제 Java 파일 샘플로 테스트

### 9. 최적화 및 에러 처리 (우선순위: 낮음)
- [ ] **9.1** 성능 최적화
  - 파일 스캔 최적화
  - 캐싱 메커니즘 강화
  - 대용량 프로젝트 대응

- [ ] **9.2** 에러 처리
  - 파싱 실패 처리
  - Bean을 찾을 수 없는 경우 처리
  - 사용자 친화적 에러 메시지

## 완료 기준
- [ ] 간단한 @Autowired 필드가 탐지됨
- [ ] @Service, @Component 클래스가 Bean으로 인식됨
- [ ] CodeLens가 @Autowired 필드에 표시됨
- [ ] CodeLens 클릭 시 Bean 구현체로 이동됨
- [ ] 기본적인 테스트가 통과됨

## 예상 완료 시간
- 기본 기능: 1-2주
- 테스트 및 최적화: 추가 1주

## 다음 Phase 준비사항
Phase 2 진행을 위해 생성자 주입 패턴 분석 준비
