---
description: Test Strategy
globs: 
alwaysApply: false
---
# Spring Bean Navigator 테스트 전략

## 테스트 구조 및 유형

### 테스트 레벨 분류
1. **단위 테스트 (Unit Tests)** - 80%
   - 개별 클래스/함수의 로직 검증
   - 빠른 실행 속도 (< 1초)
   - 외부 의존성 모킹

2. **통합 테스트 (Integration Tests)** - 15%
   - 여러 컴포넌트 간의 상호작용 검증
   - 파일 시스템, VSCode API 연동 테스트

3. **Extension 테스트 (Extension Tests)** - 5%
   - VSCode Extension 전체 워크플로우 테스트
   - 실제 VSCode 환경에서의 동작 검증

### 실제 테스트 디렉토리 구조
```
src/
├── test/
│   ├── parsers/                 # 파서 관련 테스트
│   │   ├── core/
│   │   │   ├── cst-navigator.test.ts
│   │   │   └── position-calculator.test.ts
│   │   ├── extractors/
│   │   │   ├── annotation-parser.test.ts
│   │   │   ├── autowired-detector.test.ts
│   │   │   ├── class-extractor.test.ts
│   │   │   └── field-extractor.test.ts
│   │   └── java-file-parser.test.ts
│   ├── providers/              # VSCode Provider 테스트
│   │   ├── code-lens-provider.test.ts
│   │   └── navigation-provider.test.ts
│   ├── detectors/              # Bean 탐지 테스트
│   │   └── spring-bean-detector.test.ts
│   ├── utils/                  # 유틸리티 테스트
│   │   └── bean-resolver.test.ts
│   ├── helpers/                # 테스트 헬퍼
│   │   └── test-utils.ts
│   ├── fixtures/               # 테스트 데이터 (현재 비어있음)
│   └── extension.test.ts       # 메인 extension 테스트
```

## 테스트 프레임워크 및 도구

### 사용 중인 테스트 스택
- **테스트 프레임워크**: Mocha (`@types/mocha`)
- **테스트 러너**: VSCode Test CLI (`@vscode/test-cli`)
- **테스트 환경**: VSCode Test Electron (`@vscode/test-electron`)
- **어설션 라이브러리**: Node.js `assert` 모듈
- **타입스크립트**: TypeScript 컴파일러로 테스트 빌드

### 테스트 스크립트
```json
{
  "scripts": {
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "test": "vscode-test"
  }
}
```

## 단위 테스트 전략

### 테스트 명명 규칙
- **패턴**: `should_<expectedResult>_when_<condition>`
- **예시**: 
  - `should_extractInjectionInfo_when_autowiredFieldExists`
  - `should_returnEmptyArray_when_noAutowiredFields`
  - `should_handleNullClassInfo_when_nullProvided`

### Mocha 테스트 구조
```typescript
import * as assert from 'assert';
import * as vscode from 'vscode';
import { AutowiredDetector } from '../../../parsers/extractors/autowired-detector';
import { TestUtils, JavaSampleGenerator } from '../../helpers/test-utils';

/**
 * AutowiredDetector 테스트 스위트
 */
suite('AutowiredDetector', () => {
    let autowiredDetector: AutowiredDetector;
    let positionCalculator: PositionCalculator;

    setup(() => {
        // 각 테스트 전에 실행되는 설정
        positionCalculator = new PositionCalculator();
        autowiredDetector = new AutowiredDetector(positionCalculator);
    });

    suite('extractAutowiredFields', () => {
        test('should_extractInjectionInfo_when_autowiredFieldExists', () => {
            // Arrange
            const classInfo = TestUtils.createClassInfo('TestService', 'com.example', [
                TestUtils.createFieldInfo('userRepository', 'UserRepository', [
                    TestUtils.createAnnotationInfo('Autowired', SpringAnnotationType.AUTOWIRED)
                ])
            ]);

            // Act
            const result = autowiredDetector.extractAutowiredFields([classInfo]);

            // Assert
            assert.strictEqual(result.length, 1);
            assert.strictEqual(result[0].targetType, 'UserRepository');
            assert.strictEqual(result[0].injectionType, InjectionType.FIELD);
            assert.strictEqual(result[0].targetName, 'userRepository');
        });

        test('should_returnEmptyArray_when_noAutowiredFields', () => {
            // Arrange
            const classInfo = TestUtils.createClassInfo('TestService', 'com.example', [
                TestUtils.createFieldInfo('regularField', 'String', [])
            ]);

            // Act
            const result = autowiredDetector.extractAutowiredFields([classInfo]);

            // Assert
            assert.strictEqual(result.length, 0);
        });
    });

    suite('Error Handling', () => {
        test('should_handleNullClassInfo_when_nullProvided', () => {
            // Act & Assert
            assert.doesNotThrow(() => {
                const result = autowiredDetector.extractAutowiredFields([null as any]);
                assert.strictEqual(result.length, 0);
            });
        });
    });
});
```

### 테스트 유틸리티 사용

#### TestUtils 클래스 활용
```typescript
// 모킹된 클래스 정보 생성
const classInfo = TestUtils.createClassInfo(
    'UserService',           // 클래스명
    'com.example.service',   // 패키지명
    [                        // 필드 배열
        TestUtils.createFieldInfo(
            'userRepository',    // 필드명
            'UserRepository',    // 필드 타입
            [TestUtils.createAnnotationInfo('Autowired', SpringAnnotationType.AUTOWIRED)]
        )
    ]
);

// Bean 정의 생성
const beanDefinition = TestUtils.createBeanDefinition(
    'userService',                    // Bean 이름
    'UserService',                    // Bean 타입
    'com.example.service.UserService' // 구현 클래스
);
```

#### JavaSampleGenerator 활용
```typescript
// 실제 Java 코드 샘플 사용
const javaContent = JavaSampleGenerator.simpleAutowiredClass();
const multipleFieldsContent = JavaSampleGenerator.multipleAutowiredFields();
const invalidContent = JavaSampleGenerator.invalidJavaFile();

// 특정 어노테이션별 샘플
const serviceClass = JavaSampleGenerator.serviceClass();
const repositoryClass = JavaSampleGenerator.repositoryClass();
const configurationClass = JavaSampleGenerator.configurationClass();
```

### AssertionHelper 사용
```typescript
// 복잡한 객체 검증을 위한 헬퍼
AssertionHelper.expectPositionEqual(actualPosition, expectedPosition);
AssertionHelper.expectRangeEqual(actualRange, expectedRange);
AssertionHelper.expectAnnotationValid(annotation, SpringAnnotationType.AUTOWIRED);
AssertionHelper.expectFieldValid(fieldInfo);
AssertionHelper.expectClassValid(classInfo);
```

## 통합 테스트 전략

### VSCode Extension API 테스트
```typescript
suite('CodeLensProvider Integration', () => {
    test('should_provideCodeLenses_when_javaFileWithAutowiredField', async () => {
        // Arrange
        const javaContent = JavaSampleGenerator.simpleAutowiredClass();
        const document = await vscode.workspace.openTextDocument({
            content: javaContent,
            language: 'java'
        });

        // Act
        const codeLenses = await codeLensProvider.provideCodeLenses(document);

        // Assert
        assert.ok(codeLenses);
        assert.strictEqual(codeLenses.length, 1);
        assert.ok(codeLenses[0].command);
    });
});
```

### 파일 파싱 통합 테스트
```typescript
suite('JavaFileParser Integration', () => {
    test('should_parseCompleteWorkflow_when_validSpringClassProvided', async () => {
        // Arrange
        const javaContent = JavaSampleGenerator.multipleAutowiredFields();
        const fileUri = TestUtils.createMockUri('/test/UserService.java');

        // Act
        const result = await javaFileParser.parseJavaFile(fileUri, javaContent);

        // Assert
        assert.strictEqual(result.errors.length, 0);
        assert.strictEqual(result.classes.length, 1);
        assert.strictEqual(result.injections.length, 2);
    });
});
```

## 에러 처리 테스트

### 에러 처리 패턴
```typescript
suite('Error Handling', () => {
    test('should_handleParsingError_when_invalidJavaFileProvided', async () => {
        // Arrange
        const invalidContent = JavaSampleGenerator.invalidJavaFile();
        const fileUri = TestUtils.createMockUri('/test/Invalid.java');

        // Act
        const result = await javaFileParser.parseJavaFile(fileUri, invalidContent);

        // Assert
        assert.ok(result.errors.length > 0);
        assert.ok(result.errors[0].includes('파싱 실패'));
    });

    test('should_gracefullyHandleNullContent_when_nullProvided', async () => {
        // Act & Assert
        assert.doesNotThrow(async () => {
            const result = await javaFileParser.parseJavaFile(
                TestUtils.createMockUri('/test/Null.java'), 
                null as any
            );
            assert.ok(result.errors.length > 0);
        });
    });
});
```

## 테스트 데이터 관리

### 현재 접근 방식
- **JavaSampleGenerator**: 다양한 Java 코드 샘플을 메서드로 제공
- **TestUtils**: 모킹된 객체 생성을 위한 유틸리티
- **MockHelper**: VSCode API 모킹 지원
- **AssertionHelper**: 복잡한 객체 검증 헬퍼

### 향후 개선 방안 (fixtures 디렉토리 활용)
```
src/test/fixtures/
├── java-samples/
│   ├── simple-autowired.java
│   ├── multiple-autowired.java
│   ├── no-autowired.java
│   ├── service-class.java
│   ├── repository-class.java
│   ├── configuration-class.java
│   └── invalid-syntax.java
└── expected-results/
    ├── simple-autowired.json
    ├── multiple-autowired.json
    └── service-class.json
```

## 테스트 실행 및 CI/CD

### 로컬 개발 환경
```bash
# 테스트 컴파일
npm run compile-tests

# 테스트 실행 (VSCode 환경에서)
npm test

# 감시 모드 (테스트 파일 변경 감지)
npm run watch-tests

# 린팅 포함 전체 검증
npm run pretest
```

### VSCode 통합 테스트 환경
- **VSCode Test Electron**: 실제 VSCode 인스턴스에서 테스트 실행
- **Extension Host**: Extension API 완전 지원
- **실제 파일 시스템**: 진짜 파일 I/O 테스트 가능

### CI/CD 파이프라인 고려사항
```yaml
# GitHub Actions 예시
name: Tests
on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Compile tests
        run: npm run compile-tests
        
      - name: Run tests
        run: npm test
        
      # VSCode Extension 테스트는 GUI 환경이 필요하므로 
      # 헤드리스 환경에서는 제한적
```

## 테스트 모범 사례

### DO (권장 사항)
- ✅ Mocha의 `suite()`, `test()`, `setup()` 구조 사용
- ✅ Node.js `assert` 모듈로 검증
- ✅ `should_action_when_condition` 명명 규칙 준수
- ✅ TestUtils 클래스 적극 활용
- ✅ JavaSampleGenerator로 실제 Java 코드 테스트
- ✅ AAA 패턴 (Arrange, Act, Assert) 명확히 구분
- ✅ 에러 처리 테스트 필수 포함
- ✅ 각 컴포넌트별 독립적인 테스트 스위트

### DON'T (피해야 할 사항)
- ❌ Jest 문법 (`expect`, `describe`, `it`) 사용 금지
- ❌ 테스트에서 실제 파일 시스템 변경
- ❌ 하드코딩된 절대 경로 사용
- ❌ 네트워크 호출이나 외부 서비스 의존
- ❌ 테스트 간 상태 공유 (setup()에서 초기화)
- ❌ 복잡한 테스트 로직 (테스트는 단순하게)

### 테스트 커버리지 현황
- **총 테스트 수**: 244개 (리팩토링 후 364% 증가)
- **통과율**: 99.6% (244개 중 243개 통과)
- **컴포넌트 커버리지**:
  - parsers/extractors: 25개 테스트 각각
  - parsers/core: 14-22개 테스트 각각
  - providers: 10개 이상 테스트 각각
  - utils, detectors: 포괄적 테스트 커버리지

이 테스트 전략은 현재 Spring Bean Navigator 프로젝트의 실제 구조와 사용 중인 도구들에 최적화되어 있습니다.
