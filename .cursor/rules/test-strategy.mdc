---
description: Test Strategy
globs: 
alwaysApply: false
---
# Spring Bean Navigator 테스트 전략

## 테스트 구조 및 유형

### 테스트 레벨 분류
1. **단위 테스트 (Unit Tests)** - 70%
   - 개별 클래스/함수의 로직 검증
   - 빠른 실행 속도 (< 1초)
   - 외부 의존성 모킹

2. **통합 테스트 (Integration Tests)** - 20%
   - 여러 컴포넌트 간의 상호작용 검증
   - 파일 시스템, VSCode API 연동 테스트

3. **E2E 테스트 (End-to-End Tests)** - 10%
   - 실제 사용자 시나리오 검증
   - VSCode Extension 전체 워크플로우 테스트

### 테스트 디렉토리 구조
```
src/
├── test/
│   ├── unit/                    # 단위 테스트
│   │   ├── detectors/
│   │   │   ├── autowired-detector.test.ts
│   │   │   ├── constructor-detector.test.ts
│   │   │   └── lombok-detector.test.ts
│   │   ├── parsers/
│   │   │   ├── java-parser.test.ts
│   │   │   └── kotlin-parser.test.ts
│   │   └── providers/
│   │       ├── code-lens-provider.test.ts
│   │       └── navigation-provider.test.ts
│   ├── integration/            # 통합 테스트
│   │   ├── file-system.test.ts
│   │   ├── vscode-api.test.ts
│   │   └── end-to-end.test.ts
│   ├── fixtures/               # 테스트 데이터
│   │   ├── java-samples/
│   │   │   ├── autowired-example.java
│   │   │   ├── constructor-injection.java
│   │   │   └── lombok-example.java
│   │   └── kotlin-samples/
│   │       └── kotlin-example.kt
│   └── mocks/                  # 모킹 유틸리티
│       ├── vscode-mock.ts
│       ├── file-system-mock.ts
│       └── logger-mock.ts
```

## 단위 테스트 전략

### 테스트 명명 규칙
- **패턴**: `should_<expectedResult>_when_<condition>`
- **예시**: `should_returnBeanDefinition_when_autowiredFieldExists`

### 테스트 구조 (AAA 패턴)
```typescript
describe('SpringBeanDetector', () => {
    let detector: SpringBeanDetector;
    let mockFileSystem: jest.Mocked<FileSystemService>;
    let mockLogger: jest.Mocked<Logger>;

    beforeEach(() => {
        // 공통 설정
        mockFileSystem = createMockFileSystem();
        mockLogger = createMockLogger();
        detector = new SpringBeanDetector(mockFileSystem, mockLogger);
    });

    describe('detectAutowiredFields', () => {
        it('should_returnBeanDefinition_when_autowiredFieldExists', async () => {
            // Arrange
            const javaContent = `
                public class UserController {
                    @Autowired
                    private UserService userService;
                }
            `;
            mockFileSystem.readFile.mockResolvedValue(javaContent);

            // Act
            const result = await detector.detectAutowiredFields('UserController.java');

            // Assert
            expect(result).toHaveLength(1);
            expect(result[0]).toMatchObject({
                className: 'UserService',
                fieldName: 'userService',
                injectionType: InjectionType.AUTOWIRED,
                lineNumber: 3
            });
        });

        it('should_returnEmptyArray_when_noAutowiredFields', async () => {
            // Arrange
            const javaContent = `
                public class UserController {
                    private String message;
                }
            `;
            mockFileSystem.readFile.mockResolvedValue(javaContent);

            // Act
            const result = await detector.detectAutowiredFields('UserController.java');

            // Assert
            expect(result).toHaveLength(0);
        });
    });
});
```

### 모킹 전략

#### VSCode API 모킹
```typescript
// src/test/mocks/vscode-mock.ts
export const mockVscode = {
    window: {
        showInformationMessage: jest.fn(),
        showErrorMessage: jest.fn(),
        createTextEditorDecorationType: jest.fn()
    },
    workspace: {
        findFiles: jest.fn(),
        openTextDocument: jest.fn(),
        workspaceFolders: []
    },
    languages: {
        registerCodeLensProvider: jest.fn(),
        registerDefinitionProvider: jest.fn()
    },
    Uri: {
        file: jest.fn(path => ({ fsPath: path, path }))
    }
};

jest.mock('vscode', () => mockVscode);
```

#### 파일 시스템 모킹
```typescript
// src/test/mocks/file-system-mock.ts
export function createMockFileSystem(): jest.Mocked<FileSystemService> {
    return {
        readFile: jest.fn(),
        exists: jest.fn(),
        findFiles: jest.fn(),
        getWorkspaceRoot: jest.fn().mockReturnValue('/mock/workspace')
    };
}
```

## 통합 테스트 전략

### VSCode Extension API 테스트
```typescript
// src/test/integration/vscode-api.test.ts
import * as vscode from 'vscode';

describe('VSCode API Integration', () => {
    it('should_registerCodeLensProvider_when_extensionActivates', async () => {
        // Extension 활성화 테스트
        const extension = vscode.extensions.getExtension('spring-bean-navigator');
        await extension?.activate();

        // CodeLens 제공자 등록 확인
        expect(vscode.languages.registerCodeLensProvider).toHaveBeenCalledWith(
            { language: 'java' },
            expect.any(Object)
        );
    });
});
```

### 파일 시스템 통합 테스트
```typescript
// src/test/integration/file-system.test.ts
describe('File System Integration', () => {
    it('should_detectBeans_when_realJavaFileExists', async () => {
        // 실제 테스트 파일 사용
        const testFilePath = path.join(__dirname, '../fixtures/java-samples/autowired-example.java');
        const detector = new SpringBeanDetector(new FileSystemService(), new Logger());

        const result = await detector.detectBeans(testFilePath);

        expect(result).toHaveLength(2);
        expect(result[0].className).toBe('UserService');
    });
});
```

## E2E 테스트 전략

### 사용자 시나리오 테스트
```typescript
// src/test/integration/end-to-end.test.ts
describe('End-to-End User Scenarios', () => {
    it('should_navigateToBean_when_userClicksCodeLens', async () => {
        // 1. Java 파일 열기
        const document = await vscode.workspace.openTextDocument(
            vscode.Uri.file('/test/UserController.java')
        );
        
        // 2. CodeLens 표시 확인
        const codeLenses = await codeLensProvider.provideCodeLenses(document);
        expect(codeLenses).toHaveLength(1);
        
        // 3. CodeLens 클릭 시뮬레이션
        const command = codeLenses[0].command;
        await vscode.commands.executeCommand(command!.command, ...command!.arguments!);
        
        // 4. 올바른 파일로 이동했는지 확인
        const activeEditor = vscode.window.activeTextEditor;
        expect(activeEditor?.document.fileName).toContain('UserService.java');
    });
});
```

## 테스트 데이터 관리

### 픽스처 파일 예시
```java
// src/test/fixtures/java-samples/autowired-example.java
package com.example.controller;

import org.springframework.beans.factory.annotation.Autowired;
import com.example.service.UserService;
import com.example.repository.UserRepository;

public class UserController {
    @Autowired
    private UserService userService;
    
    @Autowired
    private UserRepository userRepository;
    
    private String nonBeanField;
}
```

```java
// src/test/fixtures/java-samples/constructor-injection.java
package com.example.service;

import org.springframework.stereotype.Service;
import com.example.repository.UserRepository;

@Service
public class UserService {
    private final UserRepository userRepository;
    
    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }
}
```

### 테스트 데이터 빌더 패턴
```typescript
// src/test/builders/bean-definition-builder.ts
export class BeanDefinitionBuilder {
    private beanDefinition: BeanDefinition = {
        className: 'DefaultService',
        fieldName: 'defaultField',
        injectionType: InjectionType.AUTOWIRED,
        lineNumber: 1,
        filePath: '/default/path'
    };

    public withClassName(className: string): BeanDefinitionBuilder {
        this.beanDefinition.className = className;
        return this;
    }

    public withInjectionType(type: InjectionType): BeanDefinitionBuilder {
        this.beanDefinition.injectionType = type;
        return this;
    }

    public build(): BeanDefinition {
        return { ...this.beanDefinition };
    }
}

// 사용 예시
const beanDef = new BeanDefinitionBuilder()
    .withClassName('UserService')
    .withInjectionType(InjectionType.CONSTRUCTOR)
    .build();
```

## 테스트 커버리지 및 품질

### 커버리지 목표
- **전체 커버리지**: 85% 이상
- **핵심 로직 (detectors, parsers)**: 95% 이상
- **UI 관련 (providers)**: 80% 이상

### 커버리지 설정
```json
// package.json
{
  "scripts": {
    "test": "jest",
    "test:coverage": "jest --coverage",
    "test:watch": "jest --watch"
  },
  "jest": {
    "coverageThreshold": {
      "global": {
        "branches": 85,
        "functions": 85,
        "lines": 85,
        "statements": 85
      },
      "./src/detectors/**/*.ts": {
        "branches": 95,
        "functions": 95,
        "lines": 95,
        "statements": 95
      }
    }
  }
}
```

## CI/CD 파이프라인 테스트

### GitHub Actions 워크플로우
```yaml
# .github/workflows/test.yml
name: Tests
on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run unit tests
        run: npm run test:coverage
        
      - name: Run integration tests
        run: npm run test:integration
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
```

## 테스트 실행 및 디버깅

### 개발 중 테스트 실행
```bash
# 전체 테스트 실행
npm run test

# 특정 파일 테스트
npm run test -- autowired-detector.test.ts

# 감시 모드
npm run test:watch

# 커버리지 포함
npm run test:coverage
```

### VSCode 디버깅 설정
```json
// .vscode/launch.json
{
  "configurations": [
    {
      "name": "Debug Jest Tests",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/node_modules/.bin/jest",
      "args": ["--runInBand"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}
```

## 테스트 모범 사례

### DO (권장 사항)
- ✅ 하나의 테스트는 하나의 개념만 검증
- ✅ 테스트명으로 의도를 명확히 표현
- ✅ 실패 시 명확한 에러 메시지 제공
- ✅ 테스트 간 독립성 보장 (순서 무관)
- ✅ Given-When-Then 패턴 사용

### DON'T (피해야 할 사항)
- ❌ 테스트에서 실제 파일 시스템 변경
- ❌ 하드코딩된 절대 경로 사용
- ❌ 네트워크 호출이나 외부 서비스 의존
- ❌ 테스트에 비즈니스 로직 포함
- ❌ 너무 복잡한 테스트 설정
