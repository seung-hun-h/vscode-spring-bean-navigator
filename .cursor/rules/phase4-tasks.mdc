---
description:
globs:
alwaysApply: false
---
# Phase 4: Kotlin 지원 확장 - 작업 목록

## 목표
Kotlin Spring 프로젝트를 지원하여 Java와 Kotlin이 혼재된 현대적인 Spring 프로젝트에서도 Bean Navigator가 완벽하게 동작하도록 합니다.

## 전제 조건
- Phase 3 완료 ([Lombok 어노테이션 지원](mdc:.cursor/rules/phase3-tasks.mdc))
- Kotlin 언어 및 Spring Kotlin 특화 기능에 대한 이해

## 새로운 기능 요구사항

### Kotlin 언어 지원
- Kotlin 파일 (.kt) 파싱
- Kotlin 클래스, 프로퍼티, 생성자 분석
- Kotlin Spring 어노테이션 탐지

### Kotlin Spring 특화 기능
- 생성자 주입 (Kotlin의 기본 생성자)
- 프로퍼티 기반 주입
- lateinit var 프로퍼티 주입

## Kotlin vs Java 차이점 분석

### 생성자 차이점
- Kotlin: 기본 생성자가 클래스 선언에 포함
- Java: 별도의 생성자 메소드 정의

### 프로퍼티 차이점
- Kotlin: val (불변), var (가변) 프로퍼티
- Java: 필드 + getter/setter 메소드

### 어노테이션 차이점
- Kotlin: 사이트 타겟 어노테이션 (@field:Autowired, @param:Autowired)
- Java: 직접 어노테이션 적용

## 상세 작업 목록

### 1. Kotlin 파서 구현 (우선순위: 높음)
- [ ] **1.1** `src/parsers/kotlinFileParser.ts` 생성
  - Kotlin 파일 기본 파싱
  - 클래스 선언 추출
  - 기본 생성자 매개변수 추출
  - 프로퍼티 선언 추출

- [ ] **1.2** Kotlin 어노테이션 처리
  - 클래스 레벨 어노테이션 탐지
  - 프로퍼티 레벨 어노테이션 탐지
  - 생성자 매개변수 어노테이션 탐지
  - 사이트 타겟 어노테이션 분석

### 2. Kotlin Spring Bean 탐지기 구현 (우선순위: 높음)
- [ ] **2.1** `src/detectors/kotlinSpringDetector.ts` 생성
  - Kotlin @Component, @Service, @Repository, @Controller 탐지
  - Kotlin @Configuration 및 @Bean 메소드 탐지
  - 기본 생성자 기반 주입 탐지

- [ ] **2.2** Kotlin 주입 패턴 분석
  - val 프로퍼티 기반 생성자 주입
  - lateinit var 프로퍼티 주입
  - @Autowired 사이트 타겟 어노테이션 처리

### 3. 언어별 파서 통합 (우선순위: 높음)
- [ ] **3.1** `src/parsers/fileParserFactory.ts` 생성
  - 파일 확장자 기반 파서 선택
  - Java/Kotlin 파서 인터페이스 통일
  - 공통 AST 모델 정의

- [ ] **3.2** 기존 코드 리팩토링
  - Java 전용 코드를 범용 코드로 변경
  - 언어별 특화 처리 분리

### 4. Kotlin 타입 정의 (우선순위: 중간)
- [ ] **4.1** `src/types/kotlinTypes.ts` 생성
  - Kotlin 프로퍼티 정보 인터페이스
  - Kotlin 생성자 정보 인터페이스
  - Kotlin 어노테이션 정보 인터페이스

- [ ] **4.2** 공통 타입 확장
  - `src/types/springTypes.ts` 확장
  - 언어 중립적 Bean 정보 모델

### 5. CodeLens Provider 확장 (우선순위: 중간)
- [ ] **5.1** `src/providers/codeLensProvider.ts` 확장
  - Kotlin 파일 지원 추가
  - Kotlin 프로퍼티에 CodeLens 표시
  - 생성자 매개변수에 CodeLens 표시

- [ ] **5.2** Kotlin 특화 UI
  - "Go to Bean (Kotlin)" 텍스트 표시
  - val/var 프로퍼티 구분 표시

### 6. 네비게이션 기능 확장 (우선순위: 중간)
- [ ] **6.1** `src/providers/navigationProvider.ts` 확장
  - Kotlin 프로퍼티에서 Bean으로 이동
  - Java ↔ Kotlin Bean 간 네비게이션
  - 혼합 프로젝트에서의 Bean 검색

### 7. Bean 해결자 확장 (우선순위: 높음)
- [ ] **7.1** `src/utils/beanResolver.ts` 확장
  - Kotlin Bean 정의 검색
  - Java/Kotlin Bean 통합 검색
  - 타입 호환성 검사 (Java ↔ Kotlin)

### 8. 고급 Kotlin 기능 (우선순위: 낮음)
- [ ] **8.1** Kotlin 특화 Spring 기능
  - Spring Boot Configuration Properties (@ConfigurationProperties)
  - Kotlin DSL 지원 (spring-boot-starter-web-kotlin)
  - 코루틴 기반 Spring WebFlux 지원

- [ ] **8.2** Kotlin 언어 특화 기능
  - 확장 함수 처리
  - 데이터 클래스 처리
  - 컴패니언 오브젝트 @Bean 메소드

### 9. 테스트 구현 (우선순위: 중간)
- [ ] **9.1** Kotlin 파서 테스트
  - 기본 생성자 파싱 테스트
  - 프로퍼티 파싱 테스트
  - 어노테이션 파싱 테스트

- [ ] **9.2** Kotlin Spring 통합 테스트
  - Kotlin Bean 탐지 테스트
  - 생성자 주입 탐지 테스트
  - Java ↔ Kotlin 호환성 테스트

- [ ] **9.3** 혼합 프로젝트 테스트
  - Java + Kotlin 프로젝트에서 전체 기능 테스트

### 10. 성능 최적화 및 에러 처리 (우선순위: 낮음)
- [ ] **10.1** Kotlin 파싱 성능 최적화
  - Kotlin 파일 캐싱
  - 점진적 파싱 (변경된 부분만)

- [ ] **10.2** 에러 처리
  - Kotlin 파싱 실패 처리
  - Java/Kotlin 타입 불일치 처리

## 완료 기준
- [ ] Kotlin 파일에서 Spring Bean 탐지
- [ ] Kotlin 생성자 주입 탐지 및 CodeLens 표시
- [ ] Kotlin lateinit 프로퍼티 주입 탐지
- [ ] Java ↔ Kotlin Bean 간 네비게이션 동작
- [ ] 혼합 프로젝트에서 모든 기능 정상 동작
- [ ] Kotlin 특화 테스트 모두 통과

## 구현 예시
```kotlin
@Service
class UserService(
    private val userRepository: UserRepository, // 생성자 주입
    private val emailService: EmailService      // 생성자 주입
) {
    @Autowired
    private lateinit var notificationService: NotificationService // 프로퍼티 주입
    
    fun getUser(id: Long): User? {
        return userRepository.findById(id)
    }
}

@Repository
class UserRepository {
    fun findById(id: Long): User? {
        // 구현
    }
}
```

## 기술적 도전사항
- Kotlin 언어의 복잡한 문법 처리
- Java와 Kotlin 간의 타입 호환성
- 사이트 타겟 어노테이션의 정확한 해석
- 성능을 고려한 이중 파서 운영

## 예상 완료 시간
- Kotlin 파서 및 기본 기능: 2-3주
- 고급 기능 및 최적화: 추가 1-2주
- 전체 통합 테스트: 추가 1주

## 프로젝트 완료 기준
Phase 4 완료 시 Spring Bean Navigator는 Java/Kotlin 혼합 프로젝트에서 모든 주요 의존성 주입 패턴을 지원하게 됩니다.
